pipeline {
    agent any 
    environment {
        WORKFLOW_ID = "${BUILD_ID}"
        ANSIBLE_PRIVATE_KEY=credentials('ansible-private-key') 
        ENVVAER=credentials('ENVTXTGG') 
    }

    stages {
    
        stage('Clean Workspace') {
            steps {
                deleteDir()
                sh 'ls'
            }
        }
    
        // stage('Build Frontend') {
        //     agent {
        //         docker {
        //         image 'node'
        //         }
        //     }
        //     steps {
        //         dir('frontend') {
        //             git branch: 'master',
        //             url: 'https://github.com/Yosef-Adel/SW-FRNT-Project.git'
        //             sh 'ls '
        //             sh 'npm -v'
        //             sh 'npm install'
        //             sh 'npm build'

        //         }
                
        //         // stash(name: 'frontend-build', includes: 'frontend/node_modules/**')
        //     }

        // }

        stage('Build Backend') {
            agent {
                docker {
                image 'node'
                }
            }
            steps {
                dir('backend') {
                    git branch: 'main',
                    url: 'https://github.com/Yosef-Adel/SW-BACKEND-Project'
                    sh 'ls '
                    sh 'npm install '
                    // sh 'npm run build'
                    // Copy all files generated in the build step to the workspace directory
                    
                }
            }
        }
     
        stage('Test Backend') {
            agent {
                docker {
                image 'node'
                }
            }
            steps {
                // Copy all files from the workspace directory to the current directory
                
                sh 'ls'
                // sh 'npm install'
                // sh 'npm run test >> backend-test.txt'
            }
        }

        // stage('Test Frontend') {
        // agent {
        //     docker {
        //     image 'node:16.17.0'
        //     }
        // }
        // steps {
        //     unstash 'frontend-build'
        //     sh 'cd frontend && npm install && npm run test'
        // }
        // }
        // stage('Scan Frontend') {
        // agent {
        //     docker {
        //     image 'node:16.17.0'
        //     }
        // }
        // steps {
        //     unstash 'frontend-build'
        //     sh 'cd frontend && npm install && npm audit fix --audit-level=critical --force'
        // }
        // }
        stage('Scan Backend') {
        agent {
            docker {
            image 'node:16.17.0'
            }
        }
        steps {
            unstash 'backend-build'
            sh 'cd backend && npm install && npm audit fix --audit-level=critical --force'
        }
        }

        stage('Deploy Infrastructure') {
        agent {
            docker {
            image 'amazon/aws-cli'
            }
        }

        steps {
            sh 'yum install -y tar gzip'

            sh """
            aws cloudformation deploy \
                --template-file files/backend.yml \
                --tags Project=SW-project \
                --stack-name \"SW-project-backend-${WORKFLOW_ID}\" \
                --parameter-overrides ID=\"${WORKFLOW_ID}\"
            """

            // sh """
            // aws cloudformation deploy \
            //     --template-file files/frontend.yml \
            //     --tags Project=SW-project \
            //     --stack-name \"SW-project-frontend-${WORKFLOW_ID}\" \
            //     --parameter-overrides ID=\"${WORKFLOW_ID}\"
            // """

            sh ' echo "[web]" >> ansible/inventory.txt '
            sh """
            aws ec2 describe-instances \
                --filters \"Name=tag:Name,Values=backend-${WORKFLOW_ID}\" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> ansible/inventory.txt
            """

            stash(name: 'inventory', includes: 'ansible/inventory.txt')
           
        }

        }

        stage('configure-infrastructure') {
        steps {
            unstash 'invFile'
            dir('ansible') {
                
                sh ''' 
                    ansible-playbook -i inventory.txt --private-key=$ANSIBLE_PRIVATE_KEY configure-server.yml
                '''
            }
            }
        }

        stage('deploy-backend') {

            steps{
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cli', url: 'https://github.com/Yosef-Adel/SW-BACKEND-Project.git']])
                sh ''' 
                    tar -czf artifact.tar.gz * 
                    cp artifact.tar.gz ansible/roles/deploy/artifact.tar.gz
                    cd ansible 
                    ansible-playbook -i inventory.txt --private-key=$ANSIBLE_PRIVATE_KEY deploy-backend.yml
                '''
            }
        }



    }





    

}