pipeline {
    agent any 
    environment {
        WORKFLOW_ID = "${BUILD_ID}"
        ANSIBLE_PRIVATE_KEY=credentials('ansible-private-key') 
        ENVVAER=credentials('ENVTXTGG') 
    }
    stages {
    
        stage('Build Frontend') {
        agent {
            docker {
            image 'node:13.8.0'
            }
        }
        steps {
            checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cli', url: 'https://github.com/Yosef-Adel/SW-FRNT-Project.git']])
            sh 'cd frontend && npm install && npm run build'
            stash(name: 'frontend-build', includes: 'frontend/node_modules/**')
        }

        }

        stage('Build Backend') {
        agent {
            docker {
            image 'node:13.8.0'
            }
        }
        steps {
            checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cli', url: 'https://github.com/Yosef-Adel/SW-BACKEND-Project.git']])
            sh 'cd backend && npm install && npm run build'
            stash(name: 'backend-build', includes: 'backend/node_modules/**')
        }
        }
        stage('Test Frontend') {
        agent {
            docker {
            image 'node:13.8.0'
            }
        }
        steps {
            unstash 'frontend-build'
            sh 'cd frontend && npm install && npm run test'
        }
        }
        stage('Test Backend') {
        agent {
            docker {
            image 'node:13.8.0'
            }
        }
        steps {
            unstash 'backend-build'
            sh 'cd backend && npm install && npm run test'
        }
        }
        stage('Scan Frontend') {
        agent {
            docker {
            image 'node:13.8.0'
            }
        }
        steps {
            unstash 'frontend-build'
            sh 'cd frontend && npm install && npm audit fix --audit-level=critical --force'
        }
        }
        stage('Scan Backend') {
        agent {
            docker {
            image 'node:13.8.0'
            }
        }
        steps {
            unstash 'backend-build'
            sh 'cd backend && npm install && npm audit fix --audit-level=critical --force'
        }
        }
        stage('Deploy Infrastructure') {
        agent {
            docker {
            image 'amazon/aws-cli'
            }
        }
        steps {
            sh 'yum install -y tar gzip'

            sh """
            aws cloudformation deploy \
                --template-file files/backend.yml \
                --tags Project=SW-project \
                --stack-name \"SW-project-backend-${WORKFLOW_ID}\" \
                --parameter-overrides ID=\"${WORKFLOW_ID}\"
            """

            sh """
            aws cloudformation deploy \
                --template-file files/frontend.yml \
                --tags Project=SW-project \
                --stack-name \"SW-project-frontend-${WORKFLOW_ID}\" \
                --parameter-overrides ID=\"${WORKFLOW_ID}\"
            """

            sh """
            aws ec2 describe-instances \
                --filters \"Name=tag:Name,Values=backend-${WORKFLOW_ID}\" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> ansible/inventory.txt
            """

            stash(name: 'inventory', includes: 'inventory.txt')
           
        }
        }
        stage('configure-infrastructure') {
        steps {
            dir('ansible') {
                unstash 'invFile'
                sh ''' 
                    ls
                    cat inventory.txt 
                    echo "Test Webhook"
                    ansible-playbook -i inventory.txt --private-key=$ANSIBLE_PRIVATE_KEY configure-server.yml
                '''
            }
            }
        }



    }







}